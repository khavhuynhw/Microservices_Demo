version: '3.8'

services:

  # Eureka Server - Service Discovery
  eureka-server:
    build: 
      context: ./EurekaServer
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8761' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Authentication Service
  authentication-service:
    build:
      context: ./AuthenticationService
      dockerfile: Dockerfile
    container_name: authentication-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8080' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Customer Management Service
  customer-management-service:
    build:
      context: ./CustomerManagementService
      dockerfile: Dockerfile
    container_name: customer-management-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8081' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Car Management Service
  car-management-service:
    build:
      context: ./CarManagementService
      dockerfile: Dockerfile
    container_name: car-management-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8082' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Renting Transaction Service
  renting-transaction-service:
    build:
      context: ./RentingTransactionService
      dockerfile: Dockerfile
    container_name: renting-transaction-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      customer-management-service:
        condition: service_healthy
      car-management-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8083' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # API Gateway
  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      authentication-service:
        condition: service_healthy
      customer-management-service:
        condition: service_healthy
      car-management-service:
        condition: service_healthy
      renting-transaction-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8000' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

networks:
  microservices-network:
    driver: bridge 